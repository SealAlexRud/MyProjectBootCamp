from random import randint


class BoardException(Exception):  #–±–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
  pass


class BoardOutException(
    BoardException):  #–∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Ö–æ–¥—è—Ç –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å–∫–∏

  def __str__(self):
    return "–≠—Ç–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–Ω–µ –¥–æ—Å–∫–∏"


class BoardUsedException(BoardException):  #–∫–æ–≥–¥–∞ –∫–ª–µ—Ç–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞

  def __str__(self):
    return "–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏–ª –≤ —ç—Ç—É –∫–ª–µ—Ç–∫—É"


class BoardWrongShipException(BoardException
                              ):  #–∫–æ–≥–¥–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
  pass


class Dot:  #–¥–ª—è —Ç–æ—á–∫–∏ –Ω–∞ –¥–æ—Å–∫–µ

  def __init__(self, x, y):
    self.x = x
    self.y = y

  def __eq__(self, other):  #–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–ª—è —Ç–æ—á–µ–∫
    # __eq__ –¥–ª—è –æ–ø—Ä–µ–¥–µ–Ω–∏—è –ø–æ–≤–µ–¥–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–≤–µ–Ω—Å—Ç–≤–∞ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ –∫–ª–∞—Å—Å–∞
    return self.x == other.x and self.y == other.y

  def __str__(self):  #–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–æ—á–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    return f"({self.x}, {self.y})"


class Ship:  #–¥–ª—è –∫–æ—Ä–∞–±–ª—è

  def __init__(self, bow, l, o):  #—Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–æ–π, –¥–ª–∏–Ω–æ–π –∏ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π
    self.bow = bow
    self.l = l
    self.o = o
    self.lives = l

  @property
  #@ —Ñ—É–Ω–∫—Ü–∏–π –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä–æ–≤. –î–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã -—Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–±–µ—Ä–Ω—É—Ç—å –¥—Ä—É–≥—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –µ–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –±–µ–∑ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ–µ –∫–æ–¥–∞
  # @property –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ—Ç–æ–¥–æ–≤ –∫–ª–∞—Å—Å–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–µ–π—Ç—Å–≤—É—é—Ç –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã
  def dots(self):  #–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ—á–µ–∫ –∫–æ—Ä–∞–±–ª—è
    ship_dots = []
    for i in range(self.l):
      cur_x = self.bow.x
      cur_y = self.bow.y
      if self.o == 0:
        cur_x += i
      elif self.o == 1:
        cur_y += i
      ship_dots.append(Dot(cur_x,
                           cur_y))  #append –¥–æ–±–∞–≤–ª—è–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞
    return ship_dots

  def shooten(self, shot):  #–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±—ã–ª –ª–∏ –∫–æ—Ä–∞–±–ª—å –ø–æ–¥–±–∏—Ç –ø–æ –¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ
    return shot in self.dots


class Board:  #–¥–ª—è –¥–æ—Å–∫–∏

  def __init__(
      self,
      hid=False,
      size=6
  ):  #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–æ—Å–∫—É —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º —Å–∫—Ä—ã—Ç–∏–µ–º –∫–æ—Ä–∞–±–ª–µ–π –∏ —Ä–∞–∑–º–µ—Ä–æ–≤
    self.size = size
    self.hid = hid
    self.count = 0  #—Å—á–µ—Ç—á–∏–∫
    self.field = [["O"] * size for _ in range(size)
                  ]  #—Å–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –¥–æ—Å–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º
    self.busy = []  #—Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
    self.ships = []  #—Å–ø–∏—Å–æ–∫ –∫–æ—Ä–∞–±–ª–µ–π

  def add_ship(self, ship):  #–¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–æ—Ä–∞–±–ª—è –Ω–∞ –¥–æ—Å–∫—É
    for d in ship.dots:
      if self.out(
          d
      ) or d in self.busy:  #–ø—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ –∫–æ—Ä–∞–±–ª—å –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ—Ä–∞–±–ª—è–º–∏
        raise BoardWrongShipException(
        )  #raise –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –≤ –ª—é–±–æ–º –º–µ—Å—Ç–µ –∫–æ–¥–∞

    for d in ship.dots:  #–µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å —Ä–∞–∑–º–µ—â–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞ –¥–æ—Å–∫—É –∏ –ø–æ–º–µ—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ –∫–ª–µ—Ç–∫–∏
      self.field[d.x][d.y] = "üûí"
      self.busy.append(d)

    self.ships.append(ship)
    self.contour(ship)  # –ø–æ–º–µ—á–∞–µ–º –∫–æ–Ω—Ç—É—Ä –∫–æ—Ä–∞–±–ª—è –Ω–∞ –¥–æ—Å–∫–µ

  def contour(self, ship, verb=False):#–¥–ª—è –ø–æ–º–µ—Ç–∫–∏ –∫–æ–Ω—Ç—É—Ä–∞ –∫–æ—Ä–∞–±–ª—è –Ω–∞ –¥–æ—Å–∫–µ
    near = [(-1, -1), (-1,0),(-1,1),(0,-1),(0, 0), (0,1), (1,-1), (1,0), (1,1)]#—Å–ø–∏—Å–æ–∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫ –≤–æ–∫—Ä—É–≥ –∑–∞–¥–∞–Ω–Ω–æ–π
    for d in ship.dots:
      for dx, dy in near:
        cur = Dot(dx+dx, dy+dy)#–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å–æ—Å–µ–¥–Ω–∏—Ö —è—á–µ–µ–∫
        if not(self.out(cur)) and cur not in self.busy:
          if verb:
            self.field[cur.x][cur.y] = "."
          self.busy.append(cur)
        
        
       

  def __str__(self):  #–¥–ª—è –≤—ã–≤–æ–¥–∞ –¥–æ—Å–∫–∏ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    res = ""
    res += " |1|2|3|4|5|6|"
    for i, row in enumerate(self.field):
      res += f"\n{i+1}|" + "|".join(row) + "|"

    if self.hid:  #–µ—Å–ª–∏ —Å–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –≤–∫–ª—é—á–µ–Ω–æ, –∑–∞–º–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª—ã –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ —Å–∏–º–≤–æ–ª—ã –ø—É—Å—Ç—ã—Ö –∫–ª–µ—Ç–æ–∫
      res = res.replace("üûí", "O")
    return res

  def out(self, d):  #–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã—Ö–æ–¥–∏—Ç –ª–∏ —Ç–æ—á–∫–∞ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã –¥–æ—Å–∫–∏
    return not ((0 <= d.x < self.size) and (0 <= d.y < self.size))

  def shot(self, d):  #–º–µ—Ç–æ–¥ –¥–ª—è –≤—ã—Å—Ç—Ä–µ–ª–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ –Ω–∞ –¥–æ—Å–∫–µ
    if self.out(d):
      raise BoardOutException()
    if d in self.busy:
      raise BoardUsedException()

    self.busy.append(d)  #–¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –≤ —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö

    for ship in self.ships:  #–ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–ª –ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –≤ –∫–æ—Ä–∞–±–ª—å
      if d in ship.dots:
        ship.lives -= 1
        self.field[d.x][d.y] = "X"

        if ship.lives == 0:  # –µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–±–∏—Ç
          self.count += 1
          self.contour(ship, verb=True)
          print("–ö–æ—Ä–∞–±–ª—å —É–Ω–∏—á—Ç–æ–∂–µ–Ω")
          return 1

        else:
          print("–ö–æ—Ä–∞–±–ª—å —Ä–∞–Ω–µ–Ω")
          return 0

      self.field[d.x][d.y] = "."
      print("–ú–∏–º–æ!")
      return -1

  def begin(self):  #–º–µ—Ç–æ–¥ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
    self.busy = []


# –∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞
class Player:

  def __init__(self, board,
               enemy):  #–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ —Å –µ–≥–æ –¥–æ—Å–∫–æ–π –∏ –¥–æ—Å–∫–æ–π –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
    self.board = board
    self.enemy = enemy

  def ask(self, flag=False):  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞
    raise NotImplementedError()  #–±—É–¥–µ—Ç –æ—à–∏–±–∫–∞ –µ—Å–ª–∏ –º–µ—Ç–æ–¥ –±—É–¥–µ—Ç –Ω–µ–ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω

  def move(self):  #–¥–ª—è –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∏—è —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞
    flag = False
    while True:
      try:
        target = self.ask(flag)  #–ø–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Å—Ç—Ä–µ–ª–∞ –æ—Ç –∏–≥—Ä–æ–∫–∞
        repeat = self.enemy.shot(
          target)  #–æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º –≤—ã—Å—Ç—Ä–µ–ª –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–π —Ç–æ—á–∫–µ –Ω–∞ –¥–æ—Å–∫–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞
        if repeat == 0:  #–ï—Å–ª–∏ –≤—ã—Å—Ç—Ä–µ–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è, –ø—Ä–æ—Å–∏–º –∏–≥—Ä–æ–∫–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ö–æ–¥
          flag = True
          continue

        elif repeat == 1 and self.__class__.__name__ == 'AI':  #–µ—Å–ª–∏ –∫–æ—Ä–∞–±–ª—å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –ø–æ–¥–±–∏—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ü–µ–ª—å AI
          self.target = None

        return repeat
      except BoardException as e:  #–æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        print(e)


class AI(Player):  #–∫–ª–∞—Å—Å –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  target = None

  def ask(self, flag=False):
    while True:
      if flag or self.target is not None:
        newD = Dot(
          self.enemy.busy[-1].x, self.enemy.busy[-1].y
        )  #–Ω–æ–≤–∞—è —Ç–æ—á–∫–∞ –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Ä–∞–≤–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ç–æ—á–∫–µ –≤—ã—Å—Ç—Ä–µ–ª–∞
        x = self.enemy.busy[-1].x
        y = self.enemy.busy[-1].y

      if flag:
        self.target = self.enemy.busy[-1]

      if self.target is not None:
        newD = self.target
        x = newD.x
        y = newD.y

      while True:
        num = randint(1, 4)
        if num == 1:
          newD = Dot(x - 1, y)
        elif num == 2:
          newD = Dot(x, y - 1)
        elif num == 3:
          newD = Dot(x + 1, y)
        elif num == 4:
          newD = Dot(x, y + 1)
        if newD in self.enemy.busy or newD.x < 0 or newD.y < 0 or newD.x > (
            self.enemy.size - 1) or (newD.y > self.enemy.size - 1):
          continue
        print(f"–•–æ–¥ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: {newD.x+1} {newD.y+1}")
        return newD


class User(Player):  #–∫–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞

  def ask(self, flag=False):
    while True:
      #–∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—ã—Å—Ç—Ä–µ–ª–∞ –¥–ª—è –∏–≥—Ä–æ–∫–∞
      coords = input("–í–∞—à —Ö–æ–¥: ").split()

      if len(coords) != 2:
        print("–í–≤–µ–¥–∏—Ç–µ 2 –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã!")
        continue

      x, y = coords

      if not (x.isdigit()) or not (y.isdigit()):
        #isdigit –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö, –∞ —Ü–∏—Ñ—Ä–∞ —ç—Ç–æ –∏–ª–∏ –Ω–µ—Ç
        print("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–∞!")
        continue

      x, y = int(x), int(y)

      return Dot(x - 1, y - 1)


class Game:

  def __init__(self, size=6):
    self.size = size
    pl = self.random_board()
    co = self.random_board()
    co.hid = True
    self.ai = AI(co, pl)
    self.us = User(pl, co)

  def random_board(self):
    # —Å–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –¥–æ—Å–∫—É —Å –∫–æ—Ä–∞–±–ª—è–º–∏.
    board = None
    while board is None:
      board = self.random_place()
    return board

  def random_place(self):
    #–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –Ω–∞ –¥–æ—Å–∫–µ
    len = [3, 2, 2, 1, 1, 1, 1]
    board = Board(size=self.size)
    attempts = 0
    for l in len:
      while True:
        attempts += 1
        if attempts > 2000:
          return None
        ship = Ship(Dot(randint(0, self.size), randint(0, self.size)), l,
                    randint(0, 1))
        try:
          board.add_ship(ship)
          break
        except BoardWrongShipException:
          pass
    board.begin()
    return board

  def greet(self):
    print(" —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞: x y ")
    print(" x - –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ ")
    print(" y - –Ω–æ–º–µ—Ä —Å—Ç–æ–ª–±—Ü–∞ ")

  def loop(self):
    num = 0
    while True:
      print("-" * 20)
      print("–î–æ—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ")
      print(self.us.board)
      print("-" * 20)
      print("–î–æ—Å–∫–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞: ")
      print(self.ai.board)
      if num % 2 == 0:
        print("-" * 20)
        print("–•–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        repeat = self.us.move()
      else:
        print("-" * 20)
        print("–•–æ–¥–∏—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä")
        repeat = self.ai.move()

      if self.ai.board.count == 7:
        print("-" * 20)
        print("–í—ã –ø–æ–±–µ–¥–∏–ª–∏!")
        break
      if self.us.board.count == 7:
        print("-" * 20)
        print("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")
        break
      num += 1

  def start(self):
    self.greet()
    self.loop()


g = Game()
g.start()
